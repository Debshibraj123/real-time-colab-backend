datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Task {
  task_id     Int      @id @default(autoincrement())
  content     String
  due_date    DateTime
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user_id     Int
  document_id Int

  user     User     @relation(fields: [user_id], references: [id])
  document Document @relation(fields: [document_id], references: [id])
}

model Document {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  type      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  tasks     Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id               Int        @id @default(autoincrement())
  first_name         String     
  last_name         String     
  email            String     @unique
  password         String
  documents        Document[]
  tasks            Task[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  createdTeams     Team[]        @relation("CreatedTeams")
  teams            TeamMember[]

  @@map("users") // Optional: Specify custom table name if needed
}

model Message {
  id        Int        @id @default(autoincrement())
  text      String     @map("message_text")
  sender    User       @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User       @relation("ReceivedMessages", fields: [receiverId], references: [id])
  senderId  Int
  receiverId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("messages") // Optional: Specify custom table name if needed
}


model Team {
  id          Int           @id @default(autoincrement())
  title       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   Int
  creator     User          @relation("CreatedTeams", fields: [creatorId], references: [id])
  members     TeamMember[]

  @@map("teams") // Optional: Specify custom table name if needed
}

model TeamMember {
  teamId   Int
  userId   Int
  team     Team   @relation(fields: [teamId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@id([teamId, userId]) // Composite primary key
}

